--==============QUESTION A==============--
--ALTER TABLE RESULTATS ADD CONSTRAINT ck_resultats_notes CHECK(POINTS BETWEEN 0 AND 20);

--ALTER TABLE ELEVES ADD CONSTRAINT ck_etudiants_sexe CHECK(SEXE IN ('M', 'm', 'F', 'f', NULL));

--ALTER TABLE PROFESSEURS ADD CONSTRAINT ck_professeurs_salaire CHECK(SALAIRE_BASE<=SALAIRE_ACTUEL);


--==============QUESTION B==============--
--La derniere ne fonctionne pas, mais on pourrait le faire en Pl/SQL





--==============QUESTION C==============--

/*QUESTION 1*/
CREATE OR REPLACE TRIGGER SALAIRE_DIMINUER BEFORE UPDATE 
ON PROFESSEURS FOR EACH ROW

DECLARE
    REDUCTION EXCEPTION;
    
BEGIN
    IF :OLD.SALAIRE_ACTUEL > :NEW.SALAIRE_ACTUEL THEN
        RAISE REDUCTION;
    END IF;

EXCEPTION 
    WHEN REDUCTION THEN
        RAISE_APPLICATION_ERROR(-20000, 'Le salaire dun professeur ne peut pas diminuer');
    
END;
/

UPDATE PROFESSEURS
SET SALAIRE_ACTUEL=2700000
WHERE NUM_PROF=1;

UPDATE PROFESSEURS
SET SALAIRE_ACTUEL=2600000
WHERE NUM_PROF=1;










/*QUESTION 2*/
DROP TABLE PROF_SPECIALITE CASCADE CONSTRAINTS;

CREATE TABLE PROF_SPECIALITE(
    SPECIALITE        VARCHAR2 (20),
    NB_PROFESSEURS    NUMBER
);

CREATE OR REPLACE TRIGGER AJOUTER_PROF_SPECIALITE BEFORE INSERT OR UPDATE OR DELETE
ON PROFESSEURS FOR EACH ROW

DECLARE 
    NOMBRE_PROFESSEUR_DANS_SPECIALITE_X       INTEGER:=0;
    
BEGIN
    IF UPDATING OR DELETING THEN
        UPDATE PROF_SPECIALITE 
            SET NB_PROFESSEURS=NB_PROFESSEURS-1
            WHERE SPECIALITE=:OLD.SPECIALITE;
    END IF;

    IF INSERTING OR UPDATING THEN
        SELECT COUNT(*) INTO NOMBRE_PROFESSEUR_DANS_SPECIALITE_X
            FROM PROF_SPECIALITE
            WHERE SPECIALITE=:NEW.SPECIALITE;

        IF NOMBRE_PROFESSEUR_DANS_SPECIALITE_X=0 THEN
            INSERT INTO PROF_SPECIALITE VALUES(:NEW.SPECIALITE, 1);
        ELSE
            UPDATE PROF_SPECIALITE 
                SET NB_PROFESSEURS=NB_PROFESSEURS+1
                WHERE SPECIALITE=:NEW.SPECIALITE;
        END IF;
    END IF;
END;
/

INSERT INTO PROFESSEURS (NUM_PROF, NOM , SPECIALITE, DATE_ENTREE, DER_PROM, SALAIRE_BASE, SALAIRE_ACTUEL)
VALUES(1001, 'Requete_Test', 'MATIERE_1', '01-10-2018', '01-10-2019', 2000000, 2600000);
SELECT * FROM PROF_SPECIALITE;

INSERT INTO PROFESSEURS (NUM_PROF, NOM , SPECIALITE, DATE_ENTREE, DER_PROM, SALAIRE_BASE, SALAIRE_ACTUEL)
VALUES(1002, 'Requete_Test', 'MATIERE_1', '01-10-2018', '01-10-2019', 2000000, 2600000);
SELECT * FROM PROF_SPECIALITE;

UPDATE PROFESSEURS
SET SPECIALITE='MATIERE_2'
WHERE NUM_PROF=1002;
SELECT * FROM PROF_SPECIALITE;

DELETE FROM PROFESSEURS WHERE NUM_PROF=1001;
SELECT * FROM PROF_SPECIALITE;











/*QUESTION 3*/
CREATE OR REPLACE TRIGGER MISE_A_JOUR_TABLE_CHARGE_SUPP_DANS_PROFESSEURS BEFORE DELETE OR UPDATE
ON PROFESSEURS FOR EACH ROW
BEGIN
    IF DELETING THEN
        DELETE FROM CHARGE
        WHERE NUM_PROF=:OLD.NUM_PROF;
    ELSIF UPDATING THEN
        UPDATE CHARGE
        SET NUM_PROF=:NEW.NUM_PROF
        WHERE NUM_PROF=:OLD.NUM_PROF;
    END IF;
END;
/


SELECT * FROM CHARGE ORDER BY NUM_PROF;

DELETE FROM PROFESSEURS WHERE NUM_PROF=3;

SELECT * FROM CHARGE ORDER BY NUM_PROF;

SELECT * FROM PROFESSEURS;








/*QUESTION 4*/

DROP TABLE AUDIT_RESULTATS CASCADE CONSTRAINTS;
 
CREATE TABLE AUDIT_RESULTATS(
    UTILISATEUR     VARCHAR2(50),
    DATE_MAJ        DATE,
    DESC_MAJ        VARCHAR2(20),
    NUM_ELEVE       NUMBER (4) NOT NULL,
    NUM_COURS       NUMBER (4) NOT NULL,
    POINTS          NUMBER
);


CREATE OR REPLACE TRIGGER MISE_A_JOUR_TABLE_AUDIT_RESULTATS BEFORE INSERT OR UPDATE OR DELETE
ON RESULTATS FOR EACH ROW

BEGIN
    IF INSERTING THEN
        INSERT INTO AUDIT_RESULTATS VALUES (USER, SYSDATE, 'INSERT', :NEW.NUM_ELEVE, :NEW.NUM_COURS, :NEW.POINTS);
    ELSIF UPDATING THEN
        INSERT INTO AUDIT_RESULTATS VALUES (USER, SYSDATE, 'UPDATE', :OLD.NUM_ELEVE, :OLD.NUM_COURS, :NEW.POINTS);
    ELSIF DELETING THEN
        INSERT INTO AUDIT_RESULTATS VALUES (USER, SYSDATE, 'DELETE', :OLD.NUM_ELEVE, :OLD.NUM_COURS, :OLD.POINTS);
    END IF;
        
END;
/

INSERT INTO RESULTATS (NUM_ELEVE, NUM_COURS, POINTS) VALUES(10, 3, 16) ;

DELETE FROM RESULTATS WHERE NUM_ELEVE=3;

UPDATE RESULTATS
SET NUM_ELEVE=200
WHERE NUM_ELEVE=2;

SELECT * FROM AUDIT_RESULTATS;







/*QUESTION 5*/
CREATE OR REPLACE TRIGGER GRAND_CHEF BEFORE UPDATE  ON PROFESSEURS FOR EACH ROW
    DECLARE
        SALAIRE_ELEVE EXCEPTION;
    BEGIN
        IF USER='APEX_PUBLIC_USER' THEN
            DBMS_OUTPUT.PUT_LINE('Bingo');

            IF (:NEW.SALAIRE_ACTUEL/:OLD.SALAIRE_ACTUEL)>1.2 THEN
                RAISE SALAIRE_ELEVE;
            END IF;
        END IF;

    EXCEPTION
        WHEN SALAIRE_ELEVE THEN
            RAISE_APPLICATION_ERROR(-20002, 'Modification interdite');
END;
/






--==============QUESTION D==============--
/*QUESTION 1*/
DROP PROCEDURE pr_resultat;

CREATE OR REPLACE FUNCTION fn_moyenne(ID NUMBER)
    RETURN NUMBER
        IS MOYENNE RESULTATS.POINTS%TYPE;
    BEGIN 
        SELECT AVG(POINTS) INTO MOYENNE
            FROM RESULTATS
            WHERE NUM_ELEVE=ID;
        RETURN MOYENNE;
    EXCEPTION WHEN no_data_found THEN RETURN NULL;
    END fn_moyenne;
/

SELECT fn_moyenne(1) FROM DUAL;






/*QUESTION 2*/
CREATE PROCEDURE PR_RESULTAT IS
    V_MESSAGE    VARCHAR2(255);
    V_MOYENNE    NUMBER;
    CURSOR CURSOR_ELEVES IS SELECT NUM_ELEVE FROM ELEVES;
BEGIN
    FOR REC_ELEVES IN CURSOR_ELEVES LOOP
        V_MOYENNE := fn_moyenne(REC_ELEVES.NUM_ELEVE);
        IF V_MOYENNE IS NOT NULL THEN
            V_MESSAGE := 'ELEVE ' || REC_ELEVES.NUM_ELEVE || ' MOYENNE : ' || V_MOYENNE;
            IF V_MOYENNE BETWEEN 0 AND 8 THEN
                V_MESSAGE := V_MESSAGE || ' ÉCHEC.';
            ELSIF V_MOYENNE BETWEEN 8 AND 10 THEN
                V_MESSAGE := V_MESSAGE || ' PASSABLE.';
            ELSIF V_MOYENNE BETWEEN 10 AND 13 THEN
                V_MESSAGE := V_MESSAGE || ' ASSEZ BIEN.';
            ELSIF V_MOYENNE BETWEEN 13 AND 15 THEN
                V_MESSAGE := V_MESSAGE || ' BIEN.';
            ELSE
                V_MESSAGE := V_MESSAGE || ' TRÈS BIEN.';
            END IF;
            DBMS_OUTPUT.PUT_LINE(V_MESSAGE);
       ELSE
           DBMS_OUTPUT.PUT_LINE('ELEVE ' || REC_ELEVES.NUM_ELEVE || ' A PAS DE NOTE !');
       END IF;
   END LOOP;
END PR_RESULTAT;
/





/*QUESTION 3*/
CREATE OR REPLACE PACKAGE PACKAGE_MOYENNE IS 
    FUNCTION fn_moyenne(ID IN ELEVES.NUM_ELEVE%TYPE) RETURN NUMBER;
    PROCEDURE PR_RESULTAT;
END PACKAGE_MOYENNE;
/

CREATE OR REPLACE PACKAGE BODY PACKAGE_MOYENNE IS
    FUNCTION fn_moyenne(ID IN ELEVES.NUM_ELEVE%TYPE) RETURN NUMBER IS
        V_MOYENNE_POINTS RESULTATS.POINTS%TYPE;
    BEGIN
        SELECT AVG(POINTS) INTO V_MOYENNE_POINTS FROM RESULTATS WHERE NUM_ELEVE = ID;
        RETURN V_MOYENNE_POINTS;
        EXCEPTION WHEN NO_DATA_FOUND THEN RETURN NULL;
    END;
    
    PROCEDURE PR_RESULTAT IS
        V_MESSAGE    VARCHAR2(255);
        V_MOYENNE    NUMBER;
        CURSOR CURSOR_ELEVES IS SELECT NUM_ELEVE FROM ELEVES;
    BEGIN
        FOR REC_ELEVES IN CURSOR_ELEVES LOOP
            V_MOYENNE := fn_moyenne(REC_ELEVES.NUM_ELEVE);
            IF V_MOYENNE IS NOT NULL THEN
                V_MESSAGE := 'ELEVE ' || REC_ELEVES.NUM_ELEVE || ' MOYENNE : ' || V_MOYENNE;
                IF V_MOYENNE BETWEEN 0 AND 8 THEN
                    V_MESSAGE := V_MESSAGE || ' ECHEC.';
                ELSIF V_MOYENNE BETWEEN 8 AND 10 THEN
                    V_MESSAGE := V_MESSAGE || ' PASSABLE.';
                ELSIF V_MOYENNE BETWEEN 10 AND 13 THEN
                    V_MESSAGE := V_MESSAGE || ' ASSEZ BIEN.';
                ELSIF V_MOYENNE BETWEEN 13 AND 15 THEN
                    V_MESSAGE := V_MESSAGE || ' BIEN.';
                ELSE
                    V_MESSAGE := V_MESSAGE || ' TRES BIEN.';
                END IF;
                DBMS_OUTPUT.PUT_LINE(V_MESSAGE);
            ELSE
                DBMS_OUTPUT.PUT_LINE('ELEVE ' || REC_ELEVES.NUM_ELEVE || ' A PAS DE NOTE !');
            END IF;
        END LOOP;
    END PR_RESULTAT;
END PACKAGE_MOYENNE;
/
                
                

        
        
        
        
        
        
        